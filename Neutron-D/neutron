#!/usr/bin/python3

import os
import sys
import time
from signal import signal, SIGINT
import datetime
import random
import requests
import subprocess

red='\033[31m'
green='\033[32m'
orange='\033[33m'
blue='\033[34m'
purple='\033[35m'
cyan='\033[36m'
lightgrey='\033[37m'
darkgrey='\033[90m'
lightred='\033[91m'
lightgreen='\033[92m'
yellow='\033[93m'
lightblue='\033[94m'
pink='\033[95m'
lightcyan='\033[96m'

colors=[red,green,orange,blue,purple,lightgrey,cyan,lightblue,lightcyan,lightgreen,lightgrey,lightred,yellow,pink,darkgrey]

color=random.choice(colors)

    
class fc:
     ENDC = '\033[0m'
     BOLD = '\033[1m'
     ENDC = '\033[0m'


def sudo():
    if not os.geteuid()==0:
       sys.exit(color + "Sorry mate but I hate password promts, Use 'sudo'")

def handler(signal_received, frame):
    print(color +fc.BOLD + "\nCTRL-C detected. Exiting.... " )
    exit(0)

if __name__ == '__main__':
   signal(SIGINT, handler)


def logo():
    
    logo1 = r'''
    
_____   __           _____                     
___  | / /________  ___  /____________________ 
__   |/ /_  _ \  / / /  __/_  ___/  __ \_  __ \
_  /|  / /  __/ /_/ // /_ _  /   / /_/ /  / / /
/_/ |_/  \___/\__,_/ \__/ /_/    \____//_/ /_/ 
Freedom's just another word for missing someone. '''                                          
            
    
    
    logo2 = r'''
_____   __           _____                     
___  | / /________  ___  /____________________ 
__   |/ /_  _ \  / / /  __/_  ___/  __ \_  __ \
_  /|  / /  __/ /_/ // /_ _  /   / /_/ /  / / /
/_/ |_/  \___/\__,_/ \__/ /_/    \____//_/ /_/ 
The quieter you become the more you are able to hear. '''                                              
         

    logo3 = r'''   
_____   __           _____                     
___  | / /________  ___  /____________________ 
__   |/ /_  _ \  / / /  __/_  ___/  __ \_  __ \
_  /|  / /  __/ /_/ // /_ _  /   / /_/ /  / / /
/_/ |_/  \___/\__,_/ \__/ /_/    \____//_/ /_/ 
Whom are you so affraid of? All these average miccreants are no-one to judge Ya.
                                                                              ~Feliz'''

    logo4 = r'''
                                                                             
_____   __           _____                                
___  | / /________  ___  /____________________          
__   |/ /_  _ \  / / /  __/_  ___/  __ \_  __ \
_  /|  / /  __/ /_/ // /_ _  /   / /_/ /  / / /        
/_/ |_/  \___/\__,_/ \__/ /_/    \____//_/ /_/ 
Ever loved someone so much, you would do anything for them?  
Yeah, well make that someone yourself and do whatever the hell you want. '''                                               
         
       
    logo5 = r''' 
_____   __           _____                     
___  | / /________  ___  /____________________ 
__   |/ /_  _ \  / / /  __/_  ___/  __ \_  __ \
_  /|  / /  __/ /_/ // /_ _  /   / /_/ /  / / /
/_/ |_/  \___/\__,_/ \__/ /_/    \____//_/ /_/ 
If you don't have a friend, Then don't worry; the Big Guy's on your side.
                                                                    ~Feliz '''   
          
          
         
    logo6 = r'''
_____   __           _____                     
___  | / /________  ___  /____________________ 
__   |/ /_  _ \  / / /  __/_  ___/  __ \_  __ \
_  /|  / /  __/ /_/ // /_ _  /   / /_/ /  / / /
/_/ |_/  \___/\__,_/ \__/ /_/    \____//_/ /_/ 
It's good to be different but never belittle that angel lurking on your shoulder.
                                                                           ~feliz '''        

    logo7 = r'''
_____   __           _____                     
___  | / /________  ___  /____________________ 
__   |/ /_  _ \  / / /  __/_  ___/  __ \_  __ \
_  /|  / /  __/ /_/ // /_ _  /   / /_/ /  / / /
/_/ |_/  \___/\__,_/ \__/ /_/    \____//_/ /_/ 
Do you know? What's more painful than letting everythin go?
Finding out that everything you've ever wanted is knocking on your door in a wedding dress;
and you're staring into the bottomless pit of despair.
                                                      ~feliz '''          


    aart=[logo1,logo2,logo3,logo4,logo5,logo6,logo7]
    logos=random.choice(aart)
    print(color + fc.BOLD + logos)
    

def ip():
    try:
        ip_ = requests.get('https://icho.net/plain').text
    except requests.exceptions.RequestException:
         try:
             ip1= requests.get('https://icanhazip.com/').text
             return ip1
         except requests.exceptions.RequestException as e:
          print(e)
          print(" ")
          print("Either the internet's down or you've multiple configs at /etc/tor/torrc")
          sys.exit()
            
    return ip_    
     
    
def returnNotMatches(a, b):
    a = set(a)
    b = set(b)
    return (a-b)
    
def grep():
    res = subprocess.call(['which', 'resolvconf'], stdout=open(os.devnull, 'wb'))
    if res==0:
        pass
    else:
        try:
            os.path.exists('/etc/resolv.conf') == True
            print("Only resolv.conf's here, but the 'resolvconf' package isn't installed")
            print(red + fc.BOLD + """type-in 'apt-get install resolvconf' to install it. 
                                 or run the installer.sh again""" + fc.ENDC)
            pass
        except:
               print(red + fc.BOLD + "Can't change the nameservers as resolvconf insn't installed" + fc.ENDC)
               print(red + fc.BOLD + """type-in 'apt-get install resolvconf' to install it. 
                                 or run the installer.sh again""" + fc.ENDC)
               sys.exit()
    return 0
   
    
torrstring = ["VirtualAddrNetworkIPv4 10.192.0.0/10", 'AutomapHostsOnResolve 1',
'TransPort 9040', 'DNSPort 5353', 'CookieAuthentication 1', 'ControlPort 9051']



resolvstring = ['nameserver 127.0.0.1']
    

def configure():
    
    grep()
    
    if os.path.exists('/sbin/tor')== True:
        if os.path.exists('/etc/tor/torrc') == True:
            pass
        else:
           MFile=open('/etc/tor/torrc','w+')
           for eelements in torrstring:
                MFile.write("%s\n" % eelements)
           MFile.close()
           pass
    else:
        print('''tor is not installed, install it by typing 
            apt-get install tor''')
        sys.exit()
        
    
    subprocess.Popen(["cp", "/etc/tor/torrc", "/etc/tor/torrc.bak"])
    subprocess.Popen(["cp", "/etc/resolv.conf", "/etc/resolv.conf.backup"])
    
    with open('/etc/tor/torrc') as x:
         verse = x.read().splitlines()
            
    with open('/etc/resolv.conf') as f:
         lines = f.read().splitlines()
         
    
    
    print(" ")
    print(green + fc.BOLD + "Configuring Torrc" + fc.ENDC) 
    time.sleep(0.4)
    
    
    
    if returnNotMatches(torrstring, verse)!=set([]):
        
        MFile=open('/etc/tor/torrc','a')
        for elementss in returnNotMatches(torrstring,verse):
            MFile.write("%s\n" % elementss)
        MFile.close()
    else:
        print(green + fc.BOLD + " :) Already Configured" +fc.ENDC)
        time.sleep(0.2)
        
    subprocess.Popen(['service','tor','restart'])
    
    if returnNotMatches(resolvstring, lines)!=set([]):
        print(green + fc.BOLD + "Configuring Resolv.config" + fc.ENDC)
        time.sleep(0.4)
        MyFile=open('/etc/resolv.conf','w')
        for element in returnNotMatches(resolvstring,lines):
            MyFile.write("%s\n" % element)
        MyFile.close()
        print(green + fc.BOLD + "[Done]" + fc.ENDC)
    else:
         try: 
             resolvstring[0] in lines[0]
             print(green + fc.BOLD + "Configuring Resolv.config" + fc.ENDC)
             time.sleep(0.4)
             print(green + fc.BOLD + r""" :) Already Configured""" + fc.ENDC)
             time.sleep(0.5)
             print(green + fc.BOLD + "[Done..]" + fc.ENDC)
             pass
         except:
            print(green + fc.BOLD + "Configuring Resolv.config" + fc.ENDC) 
            MyFile=open('/etc/resolv.conf','w')
            for element in returnNotMatches(resolvstring,lines):
                MyFile.write("%s\n" % element)
            MyFile.close()    
            print(green + fc.BOLD + "[Done]" + fc.ENDC)
            
            
restore_iptables1='''sudo iptables -S'''
result = subprocess.Popen('/bin/bash', stdin=subprocess.PIPE,stdout=subprocess.PIPE)
out2, err2 = result.communicate(restore_iptables1.encode('utf-8'))

table = ['-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT', '-A OUTPUT -d 127.0.0.0/8 -j ACCEPT', '-A OUTPUT -d 10.0.0.0/8 -j ACCEPT', '-A OUTPUT -d 172.16.0.0/12 -j ACCEPT','-A OUTPUT -d 192.168.0.0/16 -j ACCEPT', '-A OUTPUT -d 127.0.0.0/8 -j ACCEPT']
    
firewall1=out2.decode('utf8').splitlines()
    
    
    
    
            
def terminate():
    
    if os.path.exists('/etc/resolv.conf.backup') and os.path.exists('/etc/tor/torrc.bak' == True) or returnNotMatches(table,firewall1)==set([]):
       pass
    else:
        print('\n' + "No instances of Neutron has been executed")
        print(green + fc.BOLD + '[Exiting...]' + fc.ENDC)
        sys.exit()
    
    restore_iptables = '''
	iptables -P INPUT ACCEPT
	iptables -P FORWARD ACCEPT
	iptables -P OUTPUT ACCEPT
	iptables -t nat -F
	iptables -t nat -X
	iptables -t mangle -F
	iptables -t mangle -X
	iptables -F
	iptables -X
	service tor stop
	'''
    process1 = subprocess.Popen('/bin/bash', stdin=subprocess.PIPE, stdout=subprocess.PIPE,stderr = subprocess.PIPE)
    out1, err1 = process1.communicate(restore_iptables.encode('utf-8'))
    
    print('\n' + green + 'Restoring Iptables rules' + fc.ENDC)
    time.sleep(0.55)
    print(green + 'Stopping tor service' + fc.ENDC)
    time.sleep(0.5)
    print(green +'[OK]' + fc.ENDC)
    if err1:
        print(color + '\n' + err1.decode('utf8').strip() + fc.ENDC)
        print(color + "Can't restore Iptables")
	
    restore = '''
    yes | cp -rf /etc/resolv.conf.backup /etc/resolv.conf
    yes | cp -rf /etc/tor/torrc.bak /etc/tor/torrc
    rm /etc/tor/torrc.bak
    rm /etc/resolv.conf.backup
    '''
    process = subprocess.Popen('/bin/bash',stdin=subprocess.PIPE, stdout=open(os.devnull, 'wb'), stderr = subprocess.PIPE)
    out, err = process.communicate(restore.encode('utf-8'))
    
    if out:  
        pass
    if err:
        print('\n' + err.decode('utf8').replace("\n", '\n'))
        print(" ")
        print(green + r'''if you're playing around,that's fine 
else your system has some serious paranoia(deleting backups itself)''' + fc.ENDC)
        sys.exit()
    print(green + "Restoring torrc and resolv Config" + fc.ENDC)
    time.sleep(0.4)
    print(green + '[DONE..]' + fc.ENDC)
    time.sleep(0.2)
    
    
    
        
def torcircuit():    
    
    if returnNotMatches(table,firewall1)==set([]):
        pass
    else:
        print('\n' + color +'Mate,You gotta start Neutron First' + fc.ENDC)
        sys.exit()
    
    subprocess.Popen(["service", "tor", "reload"])
    print(green + "Srambling Tor Nodes" + fc.ENDC)
    time.sleep(0.2)
    print(green + "[DONE]" + fc.ENDC)
    print(green  + "Your new ip appears to be: " + fc.ENDC + color + fc.BOLD + str(ip()) + fc.ENDC)


def tor_stat():
    
    ip='''
curl https://check.torproject.org |& grep -Po "(?<=strong>)[\d\.]+(?=</strong)"
curl https://check.torproject.org |& sed -n '/<title>/,/<\/title>/{ /title>/d; p }'
'''
    process1 = subprocess.Popen('/bin/bash', stdin=subprocess.PIPE, stdout=subprocess.PIPE,stderr = subprocess.PIPE)
    out1, err1 = process1.communicate(ip.encode('utf-8'))
    if len(out1.decode('utf8')) == 0:
        print(color +"""Sorry, Can't fetch the deets.
Either the internet's down or your internet config's messed up.

you may found the solution here- 
'https://github.com/Feliz-SZK/Linux-Decoded/blob/master/Fix%20temporary%20failure%20in%20name%20resolution.md'""" + fc.ENDC)
    else:
        print('\n' + color +'Your ip is: ' + out1.decode('utf8').replace("      ","").replace("browser","machine") + fc.ENDC)



def firewall():
    
    inn_out_rules = '''
			
    trans_port="9040"
    non_tor="127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"

    iptables -F
    iptables -t nat -F

    # nat dns requests to Tor
    iptables -t nat -A OUTPUT -m owner --uid-owner debian-tor -j RETURN
	iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports 5353
	iptables -t nat -A OUTPUT -p tcp --dport 53 -j REDIRECT --to-ports 5353
	iptables -t nat -A OUTPUT -p udp -m owner --uid-owner debian-tor -m udp --dport 53 -j REDIRECT --to-ports 5353
	
	#resolve .onion domains mapping 10.192.0.0/10 address space
	iptables -t nat -A OUTPUT -p tcp -d 10.192.0.0/10 -j REDIRECT --to-ports 9040
	iptables -t nat -A OUTPUT -p udp -d 10.192.0.0/10 -j REDIRECT --to-ports 9040
	
	#exclude local addresses
	for NET in $non_tor 127.0.0.0/9 127.128.0.0/10; do
		iptables -t nat -A OUTPUT -d $NET -j RETURN
	done
	
	#redirect all other output through TOR
	iptables -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports $trans_port
	iptables -t nat -A OUTPUT -p udp -j REDIRECT --to-ports $trans_port
	iptables -t nat -A OUTPUT -p icmp -j REDIRECT --to-ports $trans_port
	
	#accept already established connections
	iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
	
	#exclude local addresses
	for NET in $non_tor 127.0.0.0/8; do
		iptables -A OUTPUT -d $NET -j ACCEPT
	done
	
	#allow only tor output
	iptables -A OUTPUT -m owner --uid-owner debian-tor -j ACCEPT
    iptables -A OUTPUT -j REJECT

	'''
	
    process5 = subprocess.Popen('/bin/bash',stdin=subprocess.PIPE, stdout=open(os.devnull, 'wb'), stderr = subprocess.PIPE)
    out5, err5 = process5.communicate(inn_out_rules.encode('utf-8'))
    
    if out5:
        pass
    if err5:
        print('\n' + color + err5.decode('utf8').strip() + fc.ENDC)
        print("""There's something strange with your system
It doesn't let me change the iptable rules""")
        sys.exit()

def usage():
    
    banner = '''
                        _ ._  _ , _ ._
                      (_ ' ( `  )_  .__)
                    ( (  (    )   `)  ) _)
                   (__ (_   (_ . _) _) ,__)
                       `~~`\ ' . /`~~`
                       ,::: ;   ; :::,
                      ':::::::::::::::'
 __________________________/_ __ \__________________________
|                                                           |
| 1.Start Neutron        --type in Neutron Start            |
| 2.Stop neutron         --type in Neutron Stop             |
| 3.Check ip             --type in Neutron myip             |
| 4.Change Tor Circuit   --type in Neutron shuffle          |
| 5.Check Tor Config     --type in Neutron check            |
|                                                           |
|   (start,stop,myip,shuffle,config are Non-case sensitive) |
|___________________________________________________________|

     '''
    
    print(color + banner + fc.ENDC)


arg = sys.argv[1:]

if len(arg) != 1:
    usage()
elif sys.argv[1].casefold() in 'start':
    sudo()
    logo()
    configure()
    firewall()
    print('\n' + lightgreen + fc.BOLD + 'Your ip appears to be: ' + fc.ENDC + color +ip() + fc.ENDC)
elif sys.argv[1].casefold() in 'stop':
    sudo()
    logo()
    terminate()
elif sys.argv[1].casefold() in 'myip':
    logo()
    print('\n' + green +  'your ip is: ' + fc.ENDC + color + ip() + fc.ENDC)
elif sys.argv[1].casefold() in 'shuffle':
    sudo()
    logo()
    torcircuit()
elif  sys.argv[1].casefold() in 'check':
    logo()
    tor_stat()
else:
    print(sys.argv[1] + '! ' 'huh?')
    usage()






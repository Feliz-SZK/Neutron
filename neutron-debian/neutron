#!/usr/bin/python3

import os
import sys
import time
from signal import signal, SIGINT
import random
import requests
import subprocess
import re

red = '\033[31m'
green = '\033[32m'
orange = '\033[33m'
blue = '\033[34m'
purple = '\033[35m'
cyan = '\033[36m'
lightgrey = '\033[37m'
darkgrey = '\033[90m'
lightred = '\033[91m'
lightgreen = '\033[92m'
yellow = '\033[93m'
lightblue = '\033[94m'
pink = '\033[95m'
lightcyan = '\033[96m'


def color(*args):
	colors = [red, green, orange, blue, purple, cyan,
			 lightgreen, lightred, yellow, pink, darkgrey]
	if args:
		args, = args
		return args
	else:
		return random.choice(colors)


class fc:
	ENDC = '\033[0m'
	BOLD = '\033[1m'
	ENDC = '\033[0m'


def sudo():
	if not os.geteuid() == 0:
		sys.exit(color() + "I'm affraid I need some superuser privilages, start with 'sudo'" + fc.ENDC)


def handler(signal_received, frame):
	print(color() + fc.BOLD + "\nCTRL-C detected. Exiting.... ")
	exit(0)


if __name__ == '__main__':
	signal(SIGINT, handler)


def logo():

	logo = r'''

_____   __           _____
___  | / /________  ___  /____________________
__   |/ /_  _ \  / / /  __/_  ___/  __ \_  __ \
_  /|  / /  __/ /_/ // /_ _  /   / /_/ /  / / /
/_/ |_/  \___/\__,_/ \__/ /_/    \____//_/ /_/
'''

	wordsalads = ["Freedom's just another word for missing someone.", "The quieter you become the more you are able to hear.",
				  "It's good to be different but never belittle that angel on your shoulder.",

				  "Good love will find you.", "My heart is beating a little extra today.",
				  """Smile with all your teeth :)""", "This is a just reminder that you're strong, beautiful and worthy of love.",
				  "Treat every women like a princess.", "Never take the fact that you're a good listener as granted.",
				  "Don't think too much, it'll hurt your head.", "You may loose a lot of battles but never loose the sight of the war.",
				  "Love is a dance.."
				  ]

	wordsalad = random.choice(wordsalads)
	print(color() + fc.BOLD + logo + fc.ENDC, flush=True)
	print(color() + fc.BOLD + wordsalad.strip("\n") + fc.ENDC)


def ip():
	try:
		ip_ = requests.get('https://icanhazip.com/').text
	except requests.exceptions.RequestException:
		try:
			ip1 = requests.get('https://ipinfo.io/ip').text
			return ip1
		except requests.exceptions.RequestException as e:
			print(f'\n{e}')
			sys.exit(color() + """\nSorry, can't fetch the deets.
Either the site's down or something's up with your internet-config.

you may found the solution here :)
https://github.com/Feliz-SZK/Linux-Decoded/blob/master/Fix%20temporary%20failure%20in%20name%20resolution.md""" + fc.ENDC)


	return ip_


def frag():
	fragment = subprocess.Popen("iptables -t nat -L -n", stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True).communicate()
	frag, defrag = fragment
	if defrag: print(f"\n{red}encounterd some hiccups while checking the iptables-deets{fc.ENDC}")
	return frag.decode("utf-8")

def finesse(backoff, resolv_switch):

	if backoff > 5:
		sys.exit(
			f"\n{color(red)}excceeded no of retries, terminating to prevent memory corruption.{fc.ENDC}")

	if not os.path.exists('/etc/resolv.conf'):
		print(f"\n{color(lightblue)}resolv.conf file is missing,", end=" ")
		askin = str(input(
			f"{color(lightblue)}you want me to manually create it for ya! {lightgreen}Y/N: {fc.ENDC}")).lower().strip()

		if askin == 'y':
			try:
				with open("/etc/resolv.conf", "w") as f:
					f.write("nameserver 127.0.0.1")
				resolv_switch += 1
				print(f"{color()}Done, saved with local dns.{fc.ENDC}")
			except Exception as e:
				print(
					f"{color(red)}something's wrong, can't write the file.{fc.ENDC}\n{e}")
		elif askin == "n":
			sys.exit(f"{color(green)}Roger that, terminating....{fc.ENDC}")
		else:
			backoff += 1
			return finesse(backoff, resolv_switch)
	return resolv_switch


torrstring = ["VirtualAddrNetworkIPv4 10.192.0.0/10", 'AutomapHostsOnResolve 1',
			  'TransPort 9040 IsolateClientAddr IsolateClientProtocol IsolateDestAddr IsolateDestPort', 'DNSPort 5353', 'CookieAuthentication 1']


resolvstring = 'nameserver 127.0.0.1'


def resolv_config(r_switch):
	if r_switch == 0:
		with open('/etc/resolv.conf') as f:
			lines = f.read().splitlines()

		if resolvstring not in lines:
			print(green + fc.BOLD + "Configuring resolv.conf" + fc.ENDC)
			time.sleep(0.4)
			os.system(
					"cp /etc/resolv.conf /etc/resolv.conf.backup_neutron")
			with open('/etc/resolv.conf', 'w') as rconf:
				rconf.write("%s\n" % resolvstring)
			print(color(lightred) + "DONE :)" + fc.ENDC)
		else:
			if resolvstring in list(filter(lambda rc: 'nameserver' in rc, lines))[0]:
				print(green + fc.BOLD + "Configuring Resolv.config" + fc.ENDC)
				time.sleep(0.4)
				print(color() + fc.BOLD + """ :) Already Configured""" + fc.ENDC)
				time.sleep(0.5)
			else:
				print(green + fc.BOLD + "Configuring resolv.conf" + fc.ENDC)
				os.system(
					"cp /etc/resolv.conf /etc/resolv.conf.backup_neutron")
				with open('/etc/resolv.conf', 'w') as rconf:
					rconf.write("%s\n" % resolvstring)
				print(color(lightred) + "Done...." + fc.ENDC)
	else:
		print(green + fc.BOLD + "Configuring Resolv.config" + fc.ENDC)
		time.sleep(0.4)
		print(color() + " :) Already Configured" + fc.ENDC)

	return 0


def configure():

	if "neutron" in frag(): sys.exit(f"\n{lightblue}neutron is already running....{fc.ENDC}")

	r_switch = finesse(0, 0)

	if os.system("which tor > /dev/null") == 0:
	
		if not os.path.exists('/etc/tor/torrc'):
			print(
				f"{color(red)}No torrc file is configured.....{fc.ENDC}{color(green)}Configuring:)")
			try:
				f = open('/etc/tor/torrc', 'w+')
				for elements in torrstring:
					f.write("%s\n" % elements)
				f.close()
				print(f"{color(cyan)}Done....{fc.ENDC}")
			except Exception as e:
				print(f"{color(red)}Failed to write the torrc file{fc.ENDC} \n {e}")
				sys.exit()
		else:
			print(f"\n{color(green)}{fc.BOLD}Configuring Torrc {fc.ENDC}")
			time.sleep(0.4)

			with open('/etc/tor/torrc') as x:
				verse = x.read().splitlines()


			subprocess.Popen(["cp", "/etc/tor/torrc", "/etc/tor/torrc.bak_neutron"], stdout=subprocess.PIPE).communicate()
			torrc = open('/etc/tor/torrc', 'w')
			for elements in torrstring:
				torrc.write("%s\n" % elements)
			torrc.close()
			print(f"{color(lightred)}DONE :){fc.ENDC}")


	else:
		print(f'''\n{color(red)}tor isn't installed, install it with
'sudo apt install tor'{fc.ENDC}''')
		sys.exit()

	subprocess.Popen(['service', 'tor', 'restart'])

	resolv_config(r_switch)



def terminate():

	trigger = 0
	if os.path.exists('/etc/resolv.conf.backup_neutron'):
		trigger += 1
		restore = "yes | mv /etc/resolv.conf.backup_neutron /etc/resolv.conf"
		process = subprocess.Popen('/bin/bash', stdin=subprocess.PIPE,
								   stdout=open(os.devnull, 'wb'), stderr=subprocess.PIPE)
		print(f"\n{green}{fc.BOLD}reverting to default resolv.conf{fc.ENDC}")
		out, err = process.communicate(restore.encode('utf-8'))

		if err:
			print('\n' + err.decode('utf8').replace("\n", '\n'))
			print(red + r'''\nI guess you're playing around,
else your system has some serious paranoia; deleting backups itself.''' + fc.ENDC)
			sys.exit()
		time.sleep(0.5)
		print(f"{cyan}{fc.BOLD}[Complete]{fc.ENDC}")
	
	if os.path.exists('/etc/tor/torrc.bak_neutron'):
		trigger += 1
		torrc_restore = "mv /etc/tor/torrc.bak_neutron /etc/tor/torrc"
		process = subprocess.Popen('/bin/bash', stdin=subprocess.PIPE,
								   stdout=open(os.devnull, 'wb'), stderr=subprocess.PIPE)
		print(f"{green}{fc.BOLD}dropping of torrc file{fc.ENDC}")
		out, err = process.communicate(torrc_restore.encode('utf-8'))

		if err:
			print('\n' + err.decode('utf8').replace("\n", '\n'))
			print(" ")
			print(green + r'''I guess you're playing around, 
else your system has some serious paranoia(deleting backups itself)''' + fc.ENDC)
			sys.exit()
		time.sleep(0.5)
		print(f"{cyan}{fc.BOLD}[Done]{fc.ENDC}")
	if "neutron" in frag():
		trigger += 1
		print(green + fc.BOLD + 'Restoring Iptables rules..' + fc.ENDC)
		if os.path.exists("/etc/iptables_rules_neutron.bak"):
			one, zero = subprocess.Popen('iptables-restore < /etc/iptables_rules_neutron.bak', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True).communicate()
			os.remove('/etc/iptables_rules_neutron.bak')
			if zero and b"Warning" not in zero:
				print(f"{red} can't restore previous rules, seems the file's being tampered with\n{lightred} {zero.decode('utf-8').strip()}{fc.ENDC}")
				print(f"{green}{fc.BOLD}Defaulting..{fc.ENDC}")
				reset_to_default(0,1)
		else: 
			reset_to_default(0, 1, "is_default")
		time.sleep(1)

	if trigger == 0:
		print('\n' + red + fc.BOLD + "No instances of Neutron has been executed")
		print(green + fc.BOLD + '[Exiting...]' + fc.ENDC)
		sys.exit()
	else: print(color() + fc.BOLD + 'Cleaning up complete :)' + fc.ENDC)


def torcircuit():

	if not "neutron" in frag():
		print('\n' + color() + 'You gotta start Neutron first' + fc.ENDC)
		sys.exit()
	else:
		subprocess.Popen(["service", "tor", "reload"])
		print(green + "\nSrambling Tor Nodes" + fc.ENDC)
		time.sleep(0.4)
		print(color() + fc.BOLD + "DONE :)" + fc.ENDC)
		time.sleep(0.4)
		print(green + "Your new ip appears to be: " +
			  fc.ENDC + color() + fc.BOLD + str(ip()) + fc.ENDC)


def tor_stat(e_backoff):

	try:
		resp = requests.get("https://check.torproject.org")
	except Exception as e:
		e_backoff += 1
		if e_backoff > 2:
			sys.exit(color() + f"""\nUnable to get the network-details, try with -w once.
if this persists, please raise an issue on github.\n\n{color(red)}{e}""" + fc.ENDC)
		print(f"{color(lightgreen)}\nhaving trouble fetching exit-node details, {color(cyan)}retrying....{e_backoff}{fc.ENDC}")
		time.sleep(1.2)
		return tor_stat(e_backoff)

	status = re.search(r'<title[^>]*>([^<]+)</title>', resp.text).group(1)
	ip = re.search( r'[0-9]+(?:\.[0-9]+){3}', resp.text ).group(0)
		
	print("\nYour Ip address is: " + color() + fc.BOLD + ip + fc.ENDC)
	print(f"{color()}Congratulations, you're using tor :){fc.ENDC}") if "Congratulations" in status.strip() else print(f"{color()}{status.strip()}{fc.ENDC}")
	return 0


def firewall():

	print(f"{green}Backing up Iptables..{fc.ENDC}")
	firewall_green, firewall_red = subprocess.Popen(r"iptables-save | grep '^\-' | wc -l", stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True).communicate()
	if firewall_red:
		print(f"{red}\nCan't execute {blue}iptables-save{fc.ENDC}. see the reson below.\n{red}{fc.BOLD}{firewall_red.decode('utf-8')}{fc.ENDC}")
		sys.exit()
	if firewall_green.strip() == b'0':
		print(f" {lightblue}default rules are configured, skipping..")
	else:
		proc = subprocess.Popen('iptables-save > /etc/iptables_rules_neutron.bak', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
		outp, error = proc.communicate()
		if error and b'Warning:' not in error: 
			print(f"{red}\nCan't seem to save the iptables_bakup file in /etc.\n{error.decode('utf-8')}")
			sys.exit()
		print(f"{lightred}Done :) {blue}location: {red}/etc/iptables_rules_neutron.bak{fc.ENDC}", end='\n') 


	inn_out_rules = '''

### Set variables
# The UID that Tor runs as (varies from system to system)

_tor_uid=`id -u debian-tor` #Debian/Ubuntu

# Tor's TransPort
_trans_port="9040"

# Tor's DNSPort
_dns_port="5353"

# Tor's VirtualAddrNetworkIPv4
_virt_addr="10.192.0.0/10"


# LAN destinations that shouldn't be routed through Tor
_non_tor="127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"

# Other IANA reserved blocks (These are not processed by tor and dropped by default)
_resv_iana="0.0.0.0/8 100.64.0.0/10 169.254.0.0/16 192.0.0.0/24 192.0.2.0/24 192.88.99.0/24 198.18.0.0/15 198.51.100.0/24 203.0.113.0/24 224.0.0.0/4 240.0.0.0/4 255.255.255.255/32"

# Flushing existing Iptables Chains/Firewall rules #
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT

iptables -F
iptables -X
iptables -Z 

iptables -t nat -F
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X
iptables -t raw -F
iptables -t raw -X

### *nat OUTPUT (For local redirection)
# nat .onion addresses
iptables -t nat -A OUTPUT -d $_virt_addr -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports $_trans_port

# nat dns requests to Tor
iptables -t nat -A OUTPUT -d 127.0.0.1/32 -p udp -m udp --dport 53 -j REDIRECT --to-ports $_dns_port -m comment --comment "neutron_triggered"

# Don't nat the Tor process, the loopback, or the local network
iptables -t nat -A OUTPUT -m owner --uid-owner $_tor_uid -j RETURN
iptables -t nat -A OUTPUT -o lo -j RETURN

# Allow lan access for hosts in $_non_tor and $_resv_ina
# This is to make sure that this local addresses don't get dropped.
for _lan in $_non_tor; do
  iptables -t nat -A OUTPUT -d $_lan -j RETURN
done

for _iana in $_resv_iana; do
  iptables -t nat -A OUTPUT -d $_iana -j RETURN
done

# Redirect all other pre-routing and output to Tor's TransPort
iptables -t nat -A OUTPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports $_trans_port

### *filter INPUT
iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT
iptables -A INPUT -i lo -j ACCEPT

# Log & Drop everything else. Uncomment to enable logging
#iptables -A INPUT -j LOG --log-prefix "Dropped INPUT packet: " --log-level 7 --log-uid
iptables -A INPUT -j DROP

### *filter FORWARD
iptables -A FORWARD -j DROP

### Fix for possible kernel packet-leak as discussed in, 
### https://lists.torproject.org/pipermail/tor-talk/2014-March/032507.html
### uncomment below lines to log dropped packets

iptables -A OUTPUT -m conntrack --ctstate INVALID -j DROP
# iptables -A OUTPUT -m state --state INVALID -j LOG --log-prefix "Transproxy state leak blocked: " --log-uid
iptables -A OUTPUT -m state --state INVALID -j DROP

### *filter OUTPUT
iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT

# Allow Tor process output
iptables -A OUTPUT -m owner --uid-owner $_tor_uid -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -j ACCEPT

# Allow loopback output
iptables -A OUTPUT -d 127.0.0.1/32 -o lo -j ACCEPT

# Tor transproxy magic
iptables -A OUTPUT -d 127.0.0.1/32 -p tcp -m tcp --dport $_trans_port --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT


# Drop everything else.
iptables -A OUTPUT -j DROP

### Set default policies to DROP
iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -P OUTPUT DROP

	'''
	print(f"{green}Cooking up firewall rules{fc.ENDC}")
	process5 = subprocess.Popen('/bin/bash', stdin=subprocess.PIPE,
								stdout=open(os.devnull, 'wb'), stderr=subprocess.PIPE)
	out5, err5 = process5.communicate(inn_out_rules.encode('utf-8'))


	if err5:
		print('\n' + color() + err5.decode('utf8').strip() + fc.ENDC)
		print("""There's something strange with your system
It doesn't let me change the iptable rules""")
		sys.exit()
	time.sleep(1.2)
	print(color(lightred) + "DONE :)" + fc.ENDC)


def reset_to_default(reset_trigger, overide_pass, *args):
	if overide_pass == 0:
		if reset_trigger >7: sys.exit(f"{red}exiting to prevent memory corruption.{fc.ENDC}")
		reset_consent = input(f"{color()}This will overwrite all of your existing rules {green}Y(do it){fc.ENDC}/{red}N(exit){fc.ENDC}: ").lower()
		if reset_consent == 'y': pass
		elif reset_consent == 'n': sys.exit(f"{red}Copy that..\n{fc.ENDC}")
		else:
			reset_trigger += 1
			return reset_to_default(reset_trigger, overide_pass)
		
		time.sleep(1)
		print(f'{color()}Backing up current rules, just in case..{fc.ENDC}')
		file_name_id = time.strftime("%m_%d_%Y-%H:%M:%S", time.localtime())
		proc = subprocess.Popen(f'sudo iptables-save > /tmp/iptables_{file_name_id}.rules', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
		outp, error = proc.communicate()
		if error and b'Warning:' not in error: 
			print(f"{red}\nCan't seem to save the iptables_bakup file in /tmp directory.\n{error.decode('utf-8')}")
			sys.exit()
		print(f"{lightgreen}Saved in {blue}/tmp{fc.ENDC} as {red}iptables_{file_name_id}.rules{fc.ENDC}", end='\n\n') 

		print(green + fc.BOLD + 'Reseting Iptables' + fc.ENDC)
	iptables_rules = '''

# Accepting all traffic first#
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT
 
# Flushing All Iptables Chains/Firewall rules #
iptables -F
 
# Deleting all Iptables Chains #
iptables -X
 
# Flushing all counters too #
iptables -Z 
# Flush and delete all nat and  mangle #
iptables -t nat -F
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X
iptables -t raw -F
iptables -t raw -X
	'''
	
	process = subprocess.Popen(
		'/bin/bash', stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	out, err = process.communicate(iptables_rules.encode('utf-8'))

	time.sleep(0.5)
	if err:
		print(color() + "Can't reset Iptables")
		print(color() + '\n' + err.decode('utf8').strip() + fc.ENDC)
		sys.exit()
	if args and args[0] == "is_default":
		pass
	else:
		print(f"{cyan}{fc.BOLD} Successfully reset Iptables to default :)")

	return 0


def usage():

	banner = """
                            _ ._  _ , _ ._
                          (_ ' ( `  )_  .__)
                        ( (  (    )   `)  ) _)
                       (__ (_   (_ . _) _) ,__)
                           `~~`\ ' . /`~~`
                           ,::: ;   ; :::,
                          ':::::::::::::::'
 ______________________________/_ __ \_____________________________
|                                                                  |
| -h, --help               show this help message and exit         |
| -m, --mask               start anonymizing                       |
| -e, --expose             get back to surface-web                 |
| -i, --ip                 check current IP address                |
| -s, --shuffle            connect to a different exit-node        |
| -w, --whatami            check if using tor                      |
| -n, --nuke               backs up and reset Iptables to default. |
|__________________________________________________________________|

"""

	print(color() + banner + fc.ENDC)


arg = sys.argv[1:]
args = {"proxy": ["--mask", "-m"], "surface":["--expose", "-e"], "identity":["--ip", "-i"], 
		"scramble": ["--shuffle", "-s"], "cover": ['--whatami', '-w'], "revert_tables": ['--nuke', '-n'], "help": ["-h", "--help"]}


if len(arg) != 1:
	print(f"{color()}I need one argument: like -m or -e\nplease, use -h/--help for more usage :)\n{fc.ENDC}")
elif sys.argv[1].lower() in args['proxy']:
	sudo()
	logo()
	configure()
	firewall()
	tor_stat(0)
elif sys.argv[1].lower() in args['surface']:
	sudo()
	logo()
	terminate()
elif sys.argv[1].lower() in args['identity']:
	logo()
	print('\n' + green + 'your ip is: ' + fc.ENDC + color() + ip() + fc.ENDC)
elif sys.argv[1].lower() in args['scramble']:
	sudo()
	logo()
	torcircuit()
elif sys.argv[1].lower() in args['cover']:
	logo()
	tor_stat(0)
elif sys.argv[1].lower() in args['revert_tables']:
	sudo()
	reset_to_default(0, 0)
elif sys.argv[1].lower() in args['help']:
	usage()
else:
	print(
		f"{color(lightgreen)} {sys.argv[1]}! {color(lightblue)}ain't a valid trigger. {fc.ENDC}")
	usage()
